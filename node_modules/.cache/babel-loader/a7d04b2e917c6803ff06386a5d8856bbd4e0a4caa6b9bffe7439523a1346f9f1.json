{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brill\\\\OneDrive\\\\Escritorio\\\\Coding Related\\\\Project1-React\\\\src\\\\components\\\\NewExpense\\\\ExpenseForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./ExpenseForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseForm = () => {\n  _s();\n  // In order to save the input of the user, we will use \"useState\" to store it\n\n  // We can do and make multiple states\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\");\n\n  // One state instead of multiple one state\n  // const [userInput, setUserInput] = useState({\n  //   enteredTitle: \"\",\n  //   enteredAmount: \"\",\n  //   enteredDate: \"\",\n  // });\n\n  const titlechangeHandler = escrito => {\n    // \"escrito\" stores anything we type inside the input field\n    console.log(escrito.target.value);\n    setEnteredTitle(escrito.target.value);\n\n    // The value written by the user then will be stored with this function\n    // setUserInput({\n    //   ...userInput,\n    //   enteredTitle: escrito.target.value,\n    // });\n\n    // However the correct way is\n    // When state update depends on previous state, then this is the safer way\n    // setUserInput((prevstate) => {\n    //   return { ...prevstate, enteredTitle: escrito.target.value };\n    // });\n  };\n\n  // This function is trrigered whenever the amount is changed\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value);\n\n    // setUserInput({\n    //   ...userInput,\n    //   enteredAmount: event.target.value,\n    // });\n    // setUserInput((prevstate) => {\n    //   return { ...prevstate, enteredAmount: event.target.value };\n    // });\n  };\n\n  // This function is triggered whenever the date is changed\n  const dateChangeHandler = event => {\n    setEnteredDate(event.target.value);\n    // setUserInput({\n    //   ...userInput,\n    //   enteredDate: event.target.value,\n    // });\n    // setUserInput((prevstate) => {\n    //   return { ...prevstate, enteredDate: event.target.value };\n    // });\n  };\n\n  // Instead of having separate change Handlers function\n  // We can make one shared Change Handler function\n\n  // const inputChangeHandler = (identifier, value) => {\n  //   if (identifier === \"title\") {\n  //     setEnteredTitle(value);\n  //   } else if (identifier === \"date\") {\n  //     setEnteredDate(value);\n  //   } else {\n  //     setEnteredAmount(value);\n  //   }\n  // };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate)\n    };\n    console.log(expenseData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: titlechangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2023-12-31\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpenseForm, \"cQceuCgozgRBnFcek1NBqBcFFts=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ExpenseForm","_s","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","titlechangeHandler","escrito","console","log","target","value","amountChangeHandler","event","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","onSubmit","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","min","step","max","_c","$RefreshReg$"],"sources":["C:/Users/brill/OneDrive/Escritorio/Coding Related/Project1-React/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./ExpenseForm.css\";\r\n\r\nconst ExpenseForm = () => {\r\n  // In order to save the input of the user, we will use \"useState\" to store it\r\n\r\n  // We can do and make multiple states\r\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n  const [enteredDate, setEnteredDate] = useState(\"\");\r\n\r\n  // One state instead of multiple one state\r\n  // const [userInput, setUserInput] = useState({\r\n  //   enteredTitle: \"\",\r\n  //   enteredAmount: \"\",\r\n  //   enteredDate: \"\",\r\n  // });\r\n\r\n  const titlechangeHandler = (escrito) => {\r\n    // \"escrito\" stores anything we type inside the input field\r\n    console.log(escrito.target.value);\r\n\r\n    setEnteredTitle(escrito.target.value);\r\n\r\n    // The value written by the user then will be stored with this function\r\n    // setUserInput({\r\n    //   ...userInput,\r\n    //   enteredTitle: escrito.target.value,\r\n    // });\r\n\r\n    // However the correct way is\r\n    // When state update depends on previous state, then this is the safer way\r\n    // setUserInput((prevstate) => {\r\n    //   return { ...prevstate, enteredTitle: escrito.target.value };\r\n    // });\r\n  };\r\n\r\n  // This function is trrigered whenever the amount is changed\r\n  const amountChangeHandler = (event) => {\r\n    setEnteredAmount(event.target.value);\r\n\r\n    // setUserInput({\r\n    //   ...userInput,\r\n    //   enteredAmount: event.target.value,\r\n    // });\r\n    // setUserInput((prevstate) => {\r\n    //   return { ...prevstate, enteredAmount: event.target.value };\r\n    // });\r\n  };\r\n\r\n  // This function is triggered whenever the date is changed\r\n  const dateChangeHandler = (event) => {\r\n    setEnteredDate(event.target.value);\r\n    // setUserInput({\r\n    //   ...userInput,\r\n    //   enteredDate: event.target.value,\r\n    // });\r\n    // setUserInput((prevstate) => {\r\n    //   return { ...prevstate, enteredDate: event.target.value };\r\n    // });\r\n  };\r\n\r\n  // Instead of having separate change Handlers function\r\n  // We can make one shared Change Handler function\r\n\r\n  // const inputChangeHandler = (identifier, value) => {\r\n  //   if (identifier === \"title\") {\r\n  //     setEnteredTitle(value);\r\n  //   } else if (identifier === \"date\") {\r\n  //     setEnteredDate(value);\r\n  //   } else {\r\n  //     setEnteredAmount(value);\r\n  //   }\r\n  // };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const expenseData = {\r\n      title: enteredTitle,\r\n      amount: enteredAmount,\r\n      date: new Date(enteredDate),\r\n    };\r\n\r\n    console.log(expenseData);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <label>Title</label>\r\n          <input type=\"text\" onChange={titlechangeHandler}></input>\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            onChange={amountChangeHandler}\r\n          ></input>\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            min=\"2019-01-01\"\r\n            max=\"2023-12-31\"\r\n            onChange={dateChangeHandler}\r\n          ></input>\r\n        </div>\r\n      </div>\r\n      <div className=\"new-expense__actions\">\r\n        <button type=\"submit\">Add expense</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}